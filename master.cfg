# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
from slaves import slaves
def slmap(p): return BuildSlave(p[0], p[1]) 
c['slaves'] = map(slmap, slaves)

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9991

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

#from buildbot.changes.gitpoller import GitPoller
#c['change_source'] = []
#c['change_source'].append(GitPoller(
#        'https://github.com/rumpkernel/buildrump.sh.git',
#        workdir='gitpoller-workdir', branches=['master','testsrc'],
#        pollinterval=60))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build
from buildbot.schedulers import basic

from buildbot.schedulers import timed
hourly = timed.Periodic(name="hourly",
                builderNames=["ubuntu64", "ubuntu64-rumprun", "ubuntu64-release", "ubuntu64-fiber", "android-arm-cross", "armhf-cross", "arm-cross", "ppc-cross", "ppc64-cross", "mips-cross", "openbsd", "freebsd", "netbsd32", "netbsd64", "musl64", "clang-ubuntu64", "evbarm-x", "sparc64-x", "xen", "baremetal"],
                periodicBuildTimer=2*5*6*90)
#source = timed.Periodic(name="source",
#		builderNames=["source"],
#		periodicBuildTimer=2*5*6*90)
#build = basic.Dependent(name="build",
#		upstream=source,
#		builderNames=["posix-linux64-debug", "posix-musl64-debug", "posix-linuxppc-debug"])
#c['schedulers'] = [hourly, source, build]
c['schedulers'] = [hourly]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.source.cvs import CVS
from buildbot.steps.shell import ShellCommand

factory = BuildFactory()
factory.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factory.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factory.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj"], timeout=3600))
factory.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc -D "$(TZ=UTC date -d "30 min ago" +"%Y%m%d %H%M")UTC"'], timeout=7200))
factory.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe"}, command=["./buildrump.sh", "-s", "nbsrc", "fullbuild", "tests"], timeout=4800))

factoryrumprun = BuildFactory()
factoryrumprun.addStep(Git(repourl='https://github.com/rumpkernel/rumprun-posix.git', mode='incremental', workdir='build', timeout=2400))
factoryrumprun.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryrumprun.addStep(ShellCommand(command=["./buildrump.sh/checkout.sh", "cvsall", "nbsrc", "HEAD"], timeout=7200))
factoryrumprun.addStep(ShellCommand(command=["./buildnb.sh", "-s", "nbsrc", "tests"]))
factoryrumprun.addStep(ShellCommand(command=["make", "distcleanrump"]))

factoryxen = BuildFactory()
factoryxen.addStep(Git(repourl='https://github.com/rumpkernel/rumprun-xen.git', mode='incremental', workdir='build', timeout=2400))
factoryxen.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryxen.addStep(ShellCommand(command=["./buildrump.sh/checkout.sh", "cvsall", "nbsrc", "HEAD"], timeout=7200))
factoryxen.addStep(ShellCommand(command=["./buildxen.sh", "-s", "nbsrc"]))
factoryxen.addStep(ShellCommand(command=["./app-tools/rumprun", "xen", "-di", "tests/hello/hello"]))

factorybm = BuildFactory()
factorybm.addStep(Git(repourl='https://github.com/rumpkernel/rumprun-baremetal.git', mode='incremental', workdir='build', timeout=2400))
factorybm.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factorybm.addStep(ShellCommand(command=["./buildrump.sh/checkout.sh", "cvsall", "nbsrc", "HEAD"], timeout=7200))
factorybm.addStep(ShellCommand(command=["./buildme.sh", "-s", "nbsrc", "-qq", "--", "-F", "ACLFLAGS=-m32"]))
factorybm.addStep(ShellCommand(command=["make", "test"]))

factoryxarm = BuildFactory()
factoryxarm.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryxarm.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryxarm.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj"], timeout=3600))
factoryxarm.addStep(ShellCommand(command=["./checkout.sh", "cvs", "nbsrc", "HEAD"], timeout=7200))
factoryxarm.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe","PATH":"/usr/obj/tooldir.NetBSD-7.0_BETA-amd64/bin:/home/justin/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R7/bin:/usr/X11R6/bin:/usr/pkg/bin:/usr/pkg/sbin:/usr/games:/usr/local/bin:/usr/local/sbin","CC":"arm--netbsdelf-eabi-gcc","NM":"arm--netbsdelf-eabi-nm","AR":"arm--netbsdelf-eabi-ar","OBJCOPY":"arm--netbsdelf-eabi-objcopy"}, command=["./buildrump.sh", "-s", "nbsrc", "fullbuild"], timeout=4800))

factoryxsparc64 = BuildFactory()
factoryxsparc64.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryxsparc64.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryxsparc64.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj"], timeout=3600))
factoryxsparc64.addStep(ShellCommand(command=["./checkout.sh", "cvs", "nbsrc", "HEAD"], timeout=7200))
factoryxsparc64.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe","PATH":"/home/justin/sparc64/src/obj/tooldir.NetBSD-7.0_BETA-amd64/bin:/home/justin/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R7/bin:/usr/X11R6/bin:/usr/pkg/bin:/usr/pkg/sbin:/usr/games:/usr/local/bin:/usr/local/sbin","CC":"sparc64--netbsd-gcc","NM":"sparc64--netbsd-nm","AR":"sparc64--netbsd-ar","OBJCOPY":"sparc64--netbsd-objcopy"}, command=["./buildrump.sh", "-s", "nbsrc", "-F", "CFLAGS=--sysroot=/home/justin/sparc64/src/obj/destdir.sparc64", "fullbuild"], timeout=4800))

factoryxmips64 = BuildFactory()
factoryxmips64.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryxmips64.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryxmips64.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj"], timeout=3600))
factoryxmips64.addStep(ShellCommand(command=["./checkout.sh", "cvs", "nbsrc", "HEAD"], timeout=7200))
factoryxmips64.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe","PATH":"/home/justin/mips64/src/obj/tooldir.NetBSD-7.0_BETA-amd64/bin:/home/justin/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/X11R7/bin:/usr/X11R6/bin:/usr/pkg/bin:/usr/pkg/sbin:/usr/games:/usr/local/bin:/usr/local/sbin","CC":"mips64el--netbsd-gcc","NM":"mips64el--netbsd-nm","AR":"mips64el--netbsd-ar","OBJCOPY":"mips64el--netbsd-objcopy"}, command=["./buildrump.sh", "-s", "nbsrc", "-F", "CFLAGS=--sysroot=/home/justin/mips64/src/obj/destdir.evbmips", "fullbuild"], timeout=4800))


factorynopic = BuildFactory()
factorynopic.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factorynopic.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factorynopic.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "nbsrc"], timeout=3600))
factorynopic.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc -D "$(TZ=UTC date -d "30 min ago" +"%Y%m%d %H%M")UTC"'], timeout=7200))
factorynopic.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe"}, command=["./buildrump.sh", "-s", "nbsrc", "-V", "MKPIC=no", "fullbuild"], timeout=4800))

factoryr = BuildFactory()
factoryr.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryr.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryr.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj"], timeout=3600))
factoryr.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc -D "$(TZ=UTC date -d "30 min ago" +"%Y%m%d %H%M")UTC"'], timeout=7200))
factoryr.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe"}, command=["./buildrump.sh", "-s", "nbsrc", "-r", "fullbuild", "tests"], timeout=4800))

factorylj = BuildFactory()
factorylj.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factorylj.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factorylj.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj"], timeout=3600))
#factorylj.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj"], timeout=3600))
factorylj.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc HEAD'], timeout=7200))
#factorylj.addStep(CVS(mode='incremental',
#               cvsroot=':pserver:anoncvs@anoncvs.NetBSD.org:/cvsroot',
#               cvsmodule='src',
#	       workdir='build/src'))
factorylj.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe"}, command=["./buildrump.sh", "-s", "nbsrc", "fullbuild", "tests"], timeout=4800))
factorylj.addStep(Git(repourl='https://github.com/justincormack/ljsyscall.git', mode='incremental', workdir='buildlj', timeout=2400))
factorylj.addStep(ShellCommand(env={"LD_LIBRARY_PATH":"../build/rump/lib"},workdir="buildlj",command=["luajit", "test/test.lua", "rump"]))

factoryljf = BuildFactory()
factoryljf.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryljf.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryljf.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj"], timeout=3600))
factoryljf.addStep(ShellCommand(command=["./checkout.sh", "cvs", "nbsrc", "HEAD"], timeout=7200))
factoryljf.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe"}, command=["./buildrump.sh", "-s", "nbsrc", "fullbuild", "tests"], timeout=4800))
factoryljf.addStep(Git(repourl='https://github.com/justincormack/ljsyscall.git', mode='incremental', workdir='buildlj', timeout=2400))
factoryljf.addStep(ShellCommand(env={"LD_LIBRARY_PATH":"../build/rump/lib"},workdir="buildlj",command=["luajit", "test/test.lua", "rump"]))

factoryljfiber = BuildFactory()
factoryljfiber.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryljfiber.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryljfiber.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj"], timeout=3600))
factoryljfiber.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc -D "$(TZ=UTC date -d "30 min ago" +"%Y%m%d %H%M")UTC"'], timeout=7200))
factoryljfiber.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe"}, command=["./buildrump.sh", "-V", "RUMPUSER_THREADS=fiber", "-V", "RUMP_CURLWP=hypercall", "-s", "nbsrc", "fullbuild"], timeout=4800))
factoryljfiber.addStep(Git(repourl='https://github.com/justincormack/ljsyscall.git', mode='incremental', workdir='buildlj', timeout=2400))
factoryljfiber.addStep(ShellCommand(env={"LD_LIBRARY_PATH":"../build/rump/lib"},workdir="buildlj",command=["luajit", "test/test.lua", "rump"]))

#factoryljb = BuildFactory()
#factoryljb.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
#factoryljb.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
#factoryljb.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "nbsrc"], timeout=3600))
#factoryljb.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc -D "$(TZ=UTC date -v 30M -u "+%Y%m%d %H%M")UTC"'], timeout=7200))
#factoryljb.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe","CC":"/usr/bin/cc","AR":"/usr/bin/ar","NM":"/usr/bin/nm","OBJCOPY":"/usr/bin/objcopy"}, command=["./buildrump.sh", "-s", "nbsrc", "fullbuild", "tests"], timeout=4800))
#factoryljb.addStep(Git(repourl='https://github.com/justincormack/ljsyscall.git', mode='full', workdir='buildlj', timeout=2400))
#factoryljb.addStep(ShellCommand(env={"LD_LIBRARY_PATH":"../build/rump/lib"},workdir="buildlj",command=["luajit", "test/test.lua", "rump"]))

factoryobsd = BuildFactory()
factoryobsd.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryobsd.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryobsd.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj"], timeout=3600))
factoryobsd.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc HEAD'], timeout=7200))
factoryobsd.addStep(ShellCommand(env={"CC":"egcc"}, command=["./buildrump.sh", "-s", "nbsrc", "fullbuild", "tests"], timeout=4800))

factoryandroidarm = BuildFactory()
factoryandroidarm.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryandroidarm.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryandroidarm.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj"], timeout=3600))
factoryandroidarm.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc -D "$(TZ=UTC date -d "30 min ago" +"%Y%m%d %H%M")UTC"'], timeout=7200))
factoryandroidarm.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe","PATH":"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/home/justin/android-ndk-r10d/toolchains/arm-linux-androideabi-4.8/prebuilt/linux-x86_64/bin","CC":"arm-linux-androideabi-gcc"}, command=["./buildrump.sh", "-s", "nbsrc", "-F", "CPPFLAGS=--sysroot=/home/justin/android-ndk-r10d/platforms/android-21/arch-arm", "-F", "ACLFLAGS=--sysroot=/home/justin/android-ndk-r10d/platforms/android-21/arch-arm", "fullbuild"], timeout=4800))

factorymips = BuildFactory()
factorymips.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factorymips.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factorymips.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "nbsrc"], timeout=3600))
factorymips.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc -D "$(TZ=UTC date -d "30 min ago" +"%Y%m%d %H%M")UTC"'], timeout=7200))
factorymips.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe","CC":"mips-linux-musl-gcc","PATH":"/opt/cross/musl/mips-linux-musl/bin:/bin:/usr/bin"}, command=["./buildrump.sh", "-s", "nbsrc", "-V", "MKPIC=no", "fullbuild"], timeout=4800))

factoryppc = BuildFactory()
factoryppc.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryppc.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryppc.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "nbsrc"], timeout=3600))
factoryppc.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc -D "$(TZ=UTC date -d "30 min ago" +"%Y%m%d %H%M")UTC"'], timeout=7200))
factoryppc.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe","CC":"powerpc-linux-musl-gcc","LDFLAGS":"-static","PATH":"/opt/cross/musl/powerpc-linux-musl/bin:/bin:/usr/bin"}, command=["./buildrump.sh", "-s", "nbsrc", "-V", "MKPIC=no", "fullbuild"], timeout=4800))

factoryppc64 = BuildFactory()
factoryppc64.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
factoryppc64.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
factoryppc64.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "nbsrc"], timeout=3600))
factoryppc64.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc -D "$(TZ=UTC date -d "30 min ago" +"%Y%m%d %H%M")UTC"'], timeout=7200))
factoryppc64.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe","CC":"powerpc-linux-gnu-gcc"}, command=["./buildrump.sh", "-F", "ACLFLAGS=-m64", "-s", "nbsrc", "-V", "MKPIC=no", "fullbuild"], timeout=4800))

#factorysparc64 = BuildFactory()
#factorysparc64.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
#factorysparc64.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
#factorysparc64.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "nbsrc"], timeout=3600))
#factorysparc64.addStep(ShellCommand(command=["sh", "-x", "-c", './checkout.sh cvs nbsrc -D "$(TZ=UTC date -d "30 min ago" +"%Y%m%d %H%M")UTC"'], timeout=7200))
#factorysparc64.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe","CC":"gcc","PATH":"/usr/obj/tooldir.NetBSD-6.99.28-i386/sparc64--netbsd/bin:/usr/bin:/bin"}, command=["./buildrump.sh", "-64", "-s", "nbsrc", "fullbuild"], timeout=4800))


# check out source
from buildbot.steps.transfer import FileUpload
from buildbot.steps.transfer import FileDownload

sourcefactory = BuildFactory()
sourcefactory.addStep(Git(repourl='https://github.com/rumpkernel/buildrump.sh.git', mode='incremental', workdir='build', timeout=2400))
sourcefactory.addStep(ShellCommand(command=["git","submodule","update","--init","--recursive"]))
sourcefactory.addStep(ShellCommand(command=["./checkout.sh", "cvs", "nbsrc", "HEAD"], timeout=7200))
sourcefactory.addStep(Git(repourl='https://github.com/justincormack/ljsyscall.git', mode='incremental', workdir='build/ljsyscall', timeout=2400))
sourcefactory.addStep(ShellCommand(command=["tar", "cfz", "../source.tar.gz", "."]))
sourcefactory.addStep(FileUpload(slavesrc="../source.tar.gz", masterdest="source.tar.gz"))

buildfactory = BuildFactory()
buildfactory.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "nbsrc"], timeout=3600))
buildfactory.addStep(FileDownload(mastersrc="source.tar.gz", slavedest="../source.tar.gz"))
buildfactory.addStep(ShellCommand(command=["tar", "xfz", "../source.tar.gz"]))
buildfactory.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe"}, command=["./buildrump.sh", "-s", "nbsrc", "fullbuild", "tests"], timeout=4800))

buildfactoryppc = BuildFactory()
buildfactoryppc.addStep(ShellCommand(command=["rm", "-rf", "rump", "obj", "nbsrc"], timeout=3600))
buildfactoryppc.addStep(FileDownload(mastersrc="source.tar.gz", slavedest="../source.tar.gz"))
buildfactoryppc.addStep(ShellCommand(command=["tar", "xfz", "../source.tar.gz"]))
buildfactoryppc.addStep(ShellCommand(env={"BUILDRUMP_CFLAGS":"-pipe"}, command=["./buildrump.sh", "-s", "nbsrc", "fullbuild"], timeout=4800))

# builders

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="ubuntu64",
      slavenames=["ubuntu64"],
      factory=factorylj))

c['builders'].append(
    BuilderConfig(name="ubuntu64-rumprun",
      slavenames=["ubuntu64"],
      factory=factoryrumprun))

c['builders'].append(
    BuilderConfig(name="ubuntu64-release",
      slavenames=["ubuntu64"],
      factory=factoryr))

c['builders'].append(
    BuilderConfig(name="ubuntu64-fiber",
      slavenames=["ubuntu64"],
      factory=factoryljfiber))

c['builders'].append(
    BuilderConfig(name="clang-ubuntu64",
      slavenames=["ubuntu64"],
      factory=factorylj,
      env={"CC":"/usr/bin/clang","AR":"/usr/bin/ar","NM":"/usr/bin/nm","OBJCOPY":"/usr/bin/objcopy"}))

c['builders'].append(
    BuilderConfig(name="musl64",
      slavenames=["sabotage"],
      factory=factorylj))

c['builders'].append(
    BuilderConfig(name="armhf-cross",
      slavenames=["ubuntu64"],
      factory=factorynopic,
      env={"CC":"arm-linux-gnueabihf-gcc"}))

c['builders'].append(
    BuilderConfig(name="arm-cross",
      slavenames=["ubuntu64"],
      factory=factorynopic,
      env={"CC":"arm-linux-gnueabi-gcc"}))

c['builders'].append(
    BuilderConfig(name="android-arm-cross",
      slavenames=["ubuntu64"],
      factory=factoryandroidarm,
      env={"CC":"arm-linux-androideabi-gcc"}))

c['builders'].append(
    BuilderConfig(name="ppc-cross",
      slavenames=["ubuntu64"],
      factory=factoryppc))

c['builders'].append(
    BuilderConfig(name="ppc64-cross",
      slavenames=["ubuntu64"],
      factory=factoryppc64))

c['builders'].append(
    BuilderConfig(name="mips-cross",
      slavenames=["ubuntu64"],
      factory=factorymips))

c['builders'].append(
    BuilderConfig(name="openbsd",
      slavenames=["openbsd"],
      factory=factoryobsd))

c['builders'].append(
    BuilderConfig(name="netbsd32",
      slavenames=["netbsd32"],
      factory=factorylj))

c['builders'].append(
    BuilderConfig(name="netbsd64",
      slavenames=["netbsd64"],
      factory=factorylj))

c['builders'].append(
    BuilderConfig(name="evbarm-x",
      slavenames=["netbsd64"],
      factory=factoryxarm))

c['builders'].append(
    BuilderConfig(name="sparc64-x",
      slavenames=["netbsd64"],
      factory=factoryxsparc64))

#c['builders'].append(
#    BuilderConfig(name="mips64-x",
#      slavenames=["netbsd64"],
#      factory=factoryxmips64))



c['builders'].append(
    BuilderConfig(name="freebsd",
      slavenames=["freebsd"],
      factory=factoryljf))

#c['builders'].append(
#    BuilderConfig(name="source",
#      slavenames=["ubuntu64"],
#      factory=sourcefactory))

#c['builders'].append(
#    BuilderConfig(name="posix-linux64-debug",
#      slavenames=["ubuntu64"],
#      factory=buildfactory))

#c['builders'].append(
#    BuilderConfig(name="posix-linuxppc-debug",
#      slavenames=["ubuntu64"],
#      factory=buildfactoryppc,
#      env={"CC":"powerpc-linux-gnu-gcc"}))

#c['builders'].append(
#    BuilderConfig(name="posix-musl64-debug",
#      slavenames=["sabotage"],
#      factory=buildfactory))

c['builders'].append(
    BuilderConfig(name="xen",
      slavenames=["zander"],
      factory=factoryxen))

c['builders'].append(
    BuilderConfig(name="baremetal",
      slavenames=["zander"],
      factory=factorybm))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = False,
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8012))

from buildbot.status.mail import MailNotifier
#mn = MailNotifier(fromaddr="justin@build.myriabit.eu", mode="problem")
mn = MailNotifier(fromaddr="justin@build.myriabit.eu",
                       sendToInterestedUsers=False,mode="change",
                       extraRecipients=['rumpkernel-builds@freelists.org'])

c['status'].append(mn)


####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "buildrump.sh vs NetBSD head"
c['titleURL'] = "https://github.com/rumpkernel/buildrump.sh"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://build.myriabit.eu:8012/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
